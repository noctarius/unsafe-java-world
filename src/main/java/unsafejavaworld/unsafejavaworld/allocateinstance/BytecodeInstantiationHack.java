package unsafejavaworld.unsafejavaworld.allocateinstance;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import unsafejavaworld.unsafejavaworld.UnsafeSupport;

import java.lang.reflect.Field;
import java.util.Map;

public class BytecodeInstantiationHack
        implements Opcodes {

    public static void main(String[] args) throws Exception {
        ClassWriter cw = new ClassWriter(0);

        // public final class Loader implements java.util.Map
        cw.visit(V1_6, ACC_PUBLIC + ACC_FINAL, "Loader", null,
                "java/lang/Object", new String[]{"java/util/Map"});

        // public Loader() {
        //   super();
        // }
        MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
        mv.visitCode();
        mv.visitVarInsn(ALOAD, 0);
        mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
        mv.visitInsn(RETURN);
        mv.visitMaxs(1, 1);
        mv.visitEnd();

        // public java.lang.Object get(java.lang.Object) {}
        mv = cw.visitMethod(ACC_PUBLIC, "get", "(Ljava/lang/Object;)Ljava/lang/Object;", null, null);
        mv.visitCode();

        // new String bytecode (uninitialized instance of String)
        mv.visitTypeInsn(NEW, "java/lang/String");

        // Call to String constructor String(String)
        mv.visitInsn(DUP);
        mv.visitVarInsn(ALOAD, 1);
        mv.visitTypeInsn(CHECKCAST, "Ljava/lang/String;");
        mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "(Ljava/lang/String;)V");
        //

        /*// Call to Object constructor Object()
        mv.visitInsn(DUP);
        mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
        /*/

        // return string variable
        mv.visitInsn(ARETURN);
        mv.visitMaxs(3, 3);
        mv.visitEnd();
        cw.visitEnd();

        // Get generated bytecode
        byte[] classData = cw.toByteArray();

        // Use Unsafe::defineClass to load the generated class
        ClassLoader classLoader = BytecodeInstantiationHack.class.getClassLoader();
        Class loaderClass = UnsafeSupport.UNSAFE
                .defineClass("Loader", classData, 0, classData.length, classLoader, null);

        // Instantiate our generated adapter class
        Map<Object, String> instantiationAdapter = (Map<Object, String>) loaderClass.newInstance();

        // Create new String using our adapter
        String foo = instantiationAdapter.get("Test");

        // Get accessor to the internal char[] field
        Field valueField = String.class.getDeclaredField("value");
        valueField.setAccessible(true);

        // Show content of the String instance
        System.out.println("Value before Field::set: " + valueField.get(foo));
        System.out.println("Value before Field::set: " + foo);

        // Rewrite the value to "Something"->char[]
        valueField.set(foo, "Something".toCharArray());

        // Show content after changing the String instance
        System.out.println("Value after Field::set: " + valueField.get(foo));
        System.out.println("Value after Field::set: " + foo);
    }
}
